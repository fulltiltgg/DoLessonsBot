import { Composer } from 'grammy';

import { Users } from './../../database.js';

export const composer = new Composer();

const feature = composer.chatType('private');

function tableSchedule(schedules) {
	const delta = 18; // 
	let text = '<code>';

	for (let schedule of schedules) {
		text += '‚îå' + '‚îÄ'.repeat(delta-2) + '‚îê' + '\n';
		text += '|' + schedule.dayId + ' '.repeat(delta-schedule.dayId.length-2) + '|' + '\n';
		text += '‚îú' + '‚îÄ'.repeat(delta-2) + '‚î§' + '\n';

		for (let lesson of schedule.value?.split(';')||[]) {
			text += '‚îÇ' + lesson + ' '.repeat(delta-lesson.length-2) + '|' + '\n';
		}

		text += '‚îî' + '‚îÄ'.repeat(delta-2) + '‚îò' + '\n';
	}

	return text+'</code>';
}

feature.hears(/üìö –í—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ|\/getschedule/, async ctx => {
	const schedules = await (await Users.findOne({ where: { userId: ctx.from.id } })).getSchedules();

	ctx.reply(tableSchedule(schedules));
});

feature.hears(/üìÅ –î\/–ó|\/getlessons/, async ctx => {
	const lessons = await (await Users.findOne({ where: { userId: ctx.from.id } })).getLessons();
	const text = lessons.map(el => `${el.lessonId[0].toUpperCase()+el.lessonId.slice(1)}: ${el.value}`).join('\n');
	await ctx.reply(`[üß©] –í–æ—Ç –≤–∞—à–µ –î/–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n<code>${text}</code>`);
});