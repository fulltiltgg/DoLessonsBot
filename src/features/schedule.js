import { Composer } from "grammy";

import { createConversation } from "@grammyjs/conversations";

import { keyboard as backKeyboard } from './../keyboards/lessons.js'
import { days as daysKeyboard } from './../keyboards/welcome.js'

import { Users } from './../helpers/db.js'

export const composer = new Composer();

async function schedule(conversation, ctx) {
	await ctx.reply(
		`[‚öí] –£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>${ctx.match[0].toLowerCase()}</b>.`,
		{ reply_markup: backKeyboard }
	);
	
	const { msg } = await conversation.waitFor('message:text');

	if (msg.text === '‚Ü™Ô∏è –ù–∞–∑–∞–¥') {
		await ctx.reply(
			`[‚ùå] –û—Ç–º–µ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>${ctx.match[0].toLowerCase()}</b>.`,
			{ reply_markup: daysKeyboard }
		);
		return;
	}

	await conversation.external(async () => {
		(await Users.findUser(ctx.from.id)).setSchedule(ctx.match[0].toLowerCase(), msg.text.replace(/\n/gi, ';'));
	});

	await ctx.reply(
		`[üéì] –í—ã —É–∫–∞–∑–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>${ctx.match[0].toLowerCase()}</b>:\n<code>${msg.text}</code>`,
		{ reply_markup: daysKeyboard }
	);
	return;
};

const feature = composer.chatType('private');

feature.use(createConversation(schedule));

feature.hears(/–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞/i, async ctx => {
	await ctx.conversation.enter('schedule');
});