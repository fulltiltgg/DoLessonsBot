import { Composer } from "grammy";

import { createConversation } from "@grammyjs/conversations";

import { keyboard as backKeyboard } from './../keyboards/back.keyboard.js'
import { keyboard as lessonsKeyboard } from './../keyboards/lessons.keyboard.js'

import { Users } from './../helpers/db.js'

export const composer = new Composer();

async function lessons(conversation, ctx) {
	await ctx.reply(
		`[‚öí] –£–∫–∞–∂–∏—Ç–µ –î/–ó –¥–ª—è <b>${ctx.match[0].toLowerCase()}</b>.`,
		{ reply_markup: backKeyboard }
	);
	
	const { msg } = await conversation.waitFor('message:text');

	if (msg.text === '‚Ü™Ô∏è –ù–∞–∑–∞–¥') {
		await ctx.reply(
			`[‚ùå] –û—Ç–º–µ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–Ω–∏—è –î/–ó –¥–ª—è <b>${ctx.match[0].toLowerCase()}</b>.`,
			{ reply_markup: lessonsKeyboard }
		);
		return;
	}

	await conversation.external(async () => {
		(await Users.findUser(ctx.from.id)).setLesson(ctx.match[0].toLowerCase(), msg.text);
	});

	await ctx.reply(
		`[üéì] –í—ã —É–∫–∞–∑–∞–ª–∏ –î/–ó –¥–ª—è <b>${ctx.match[0].toLowerCase()}</b>: <code>${msg.text}</code>`,
		{ reply_markup: lessonsKeyboard }
	);
	return;
};

const feature = composer.chatType('private');

feature.use(createConversation(lessons));

feature.hears(/–ê–ª–≥–µ–±—Ä–∞|–ì–µ–æ–º–µ—Ç—Ä–∏—è|–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞|–ì–µ–æ–≥—Ä–∞—Ñ–∏—è|–ë–∏–æ–ª–æ–≥–∏—è|–•–∏–º–∏—è|–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞|–ù–µ–º\. —è–∑\.|–†—É—Å\. —è–∑\.|–û–±—â–µ—Å—Ç–≤–æ|–ò—Å—Ç–æ—Ä–∏—è|–§–∏–∑–∏–∫–∞|–û–ë–ñ/i, async ctx => {
	await ctx.conversation.enter('lessons');
});